# 1 - TODO tests
badutf2.test.lua        #1 waiting. uses prepared statements
between.test.lua        #1 Waiting #2455 ( uses sqlite sort count)
conflict3.test.lua      #1 Fully commented
default.test.lua        #1 fully commented, should be converted?
e_changes.test.lua      #1 fully commented, should be converted?
e_createtable.test.lua  #1 showld be rewritten (row id, pk)
e_droptrigger.test.lua  #1 fully commented, should be converted? should be rewritten
e_dropview.test.lua     #1 fully commented, should be converted? should be rewritten
e_insert.test.lua       #1 fully commented, should be converted? should be rewritten
e_fkey.test.lua         #1 fully commented, should be converted? should be rewritten
e_totalchanges.test.lua #1 Waiting. access to total_changes func #2455 and reloads db a lot
e_select2.test.lua      #1 Uses prep statm, a lot ot convert with hands
e_update.test.lua       #1 Fully commented, should be converted? should be rewritten
insert3.test.lua  #1 FC. Waiting for pk autoincrement to replace rowid, or should be rewritten
insert4.test.lua  #1 Fully commented, need access to sqlite3_xferopt_count (#2455 could be exported)
misc4.test.lua    #1 fc. uses prep statements, statements, but should be converted? 
notnull.test.lua  #1 fully commented, should be rewritten? checks not null constraint
numcast.test.lua  #1 check casting strings for utf, utf16le+be. Should be converted only for utf8 case?
sort2.test.lua      #1 Fully commented, multi-threaded sorting
tkt2213.test.lua #1 Ignored as related to tcl. this test case should be added to lua_sql test
tkt-7bbfb7d442.test.lua #1 Converted, half of the test do not work, do not why. Hard to find out. Need time for research
trigger6.test.lua #1 Need #2233 to be implemented (Now looks like could be implemented with lua_sql)
wherelimit.test.lua #1 and need to enable delete_limit in source This sqlite option is turned off in tarantool (SQLITE_ENABLE_UPDATE_DELETE_LIMIT is not defined) 
fuzz1.test.lua          #1.9 fc. seems like a good test. should be uncommented? on hard to parse statements
fuzz2.test.lua          #1.9 fc. should be uncommented?
fuzz3.test.lua          #1.9 fc. checks db_checksumm before and after read operations. not related to T?

# 2 - Tests which are pending until a feature is implemented
temptable.test.lua    #2 (#TBS) Fully commented, waiting for implementation of temp_tables, uses sql_master a lot
tkt2251.test.lua #2 (attach test to #2349) Converted(stored in waiting branch), but not workung. Depends on #2349, altertable
tkt3718.test.lua #2 (#TBS, dep on #1796) Waiting. problem with iterators, converted(waiting branch)
tkt3824.test.lua #2 (#2455, attach as test) Waiting (test uses db status sort)
tkt3838.test.lua #2 Converted(stored in waiting branch), but not working Depends on #2349 (alter table) and UTF 16 #2295
tkt3992.test.lua #2 Converted(stored in waiting branch), but not working Depends on #2349 (alter table, triggers)
tkt3997.test.lua #2 (attach to #2121) Waiting for collations
tkt-2a5629202f.test.lua #2 (attach to #2455) Waiting cksort (test uses db status) 
tkt-8454a207b9.test.lua #2 Waiting for #2363 int64, #2349 alter table 
tkt-b72787b1.test.lua   #2 (attach to #2245) prepared statement
tkt-f67b41381a.test.lua #2 (attach to #2349) Not converted. Waiting #2349 (alter table)
tkt-f777251dc7a.test.lua #2 (attach to transactions issue) Waiting for transactions
trigger3.test.lua #2 (Ditto) Waiting for transacrions (in triggers)
types3.test.lua   #3 postponed should be rewritten. (do not know how tcl passes args properly)
where.test.lua    #2 (attach to #2455) waiting for #2455 (search_count)
where8.test.lua #2 (Ditto) Need #2455 (sqlite_search count)
where9.test.lua #2 (Ditto) uses db status sort, db status step
whereE.test.lua #2 (Attach to #2162) Fully commented, uses alter table, analyze and not uses pk 
whereH.test.lua #2 Fully commented, probably because of #2289 (index on all columns)
whereJ.test.lua #2 (#TBS, create _stat space-table) Fully commented, uses insert into sqlite_stat1,4
alias.test.lua        #1 waiting in waiting branch, calls sequence() method more times than expected
altermalloc.test.lua  #2 waiting for alter table #2349
alter1.test.lua       #2 waiting for alter table #2349
alter2.test.lua       #2 waiting for alter table #2349
alter3.test.lua       #2 waiting for alter table #2349
alter4.test.lua       #2 waiting for alter table #2349
analyze1.test.lua     #1 fullyC uses analyze, not related to t
analyze3.test.lua     #1 fullyC uses analyze, not related to t
analyze4.test.lua     #1 fullyC uses analyze, not related to t
analyze5.test.lua     #1 fullyC uses analyze, not related to t
analyze6.test.lua     #1 fullyC uses analyze, not related to t
analyze7.test.lua     #1 fullyC uses analyze, not related to t
analyze8.test.lua     #1 fullyC uses analyze, not related to t
analyze9.test.lua     #1 fullyC uses analyze, not related to t
analyzeA.test.lua     #1 fullyC uses analyze, not related to t
analyzeB.test.lua     #1 fullyC uses analyze, not related to t
analyzeC.test.lua     #1 fullyC uses analyze, not related to t
analyzeD.test.lua     #1 fullyC uses analyze, not related to t
analyzeE.test.lua     #1 fullyC uses analyze, not related to t
analyzeF.test.lua     #1 fullyC uses analyze, not related to t
autoinc.test.lua        #2 Waiting autoincrement #2263
autoindex1.test.lua     #1 Waiting. Uses db status, tcl impl not pass tests
autoindex2.test.lua     #1 not relevant. FullyC. Waiting. Uses sqlite_master. sqlite_stat1 #2244
autoindex3.test.lua     #1 FullyC. Waiting. Uses sqlite_stat1, analyze... should it be it tarantool?
busy.test.lua           #2 Waiting for transactions.
capi1.test.lua          #2.5 Fully commented. checks some vdbe functions. uses prep statements, sqlite_master 
capi2.test.lua          #2.5 Fully commented. checks some vdbe functions. uses prep statements, sqlite_master 
capi3.test.lua          #2.5 Fully commented. checks prepared statements, where sql encoded with utf16 
closure01.test.lua      #2 Not related to tarantool. testing transitive_clousre extension for tree structured data
collate1.test.lua       #2 Fully commented Do we not support collations? 
collate2.test.lua       #2 Fully commented Do we not support collations? 
collate3.test.lua       #2 Fully commented Do we not support collations? 
collate4.test.lua       #2 Fully commented Do we not support collations? 
collate5.test.lua       #2 Fully commented Do we not support collations? 
collate6.test.lua       #2 Fully commented Do we not support collations? 
collate7.test.lua       #2 Fully commented Do we not support collations? 
collate8.test.lua       #2 Fully commented Do we not support collations? 
collate9.test.lua       #2 Fully commented Do we not support collations? 
collateA.test.lua       #2 Fully commented Do we not support collations? 
colmeta.test.lua        #2.5 Fully commented. Do not related to T? tests sqlite3_table_column_metadata from main.c
conflict.test.lua       #2 Waiting for #2495 and transactions
conflict2.test.lua      #2 Fully commented, transactions
coveridxscan.test.lua   #2 Sohuld be rewritten. Relies on sqlite internall staff (like rowid) (tcl version does not work)
cost.test.local         #2.1 Should be rewritten, (delete row id, add pk influences test results)
createtab.test.lua      #2.1 not related to tarantool? uses autovacuum, check that internal structs of new tables in sql do not affect old structures?
delete2.test.lua        #2 fully commented, possible because of bad iterators in memtex
enc4.test.lua           #2 Waiting for prep statements + uses utf16 
exists.test.lua         #2.5 fully commented. uses sqlite_master a lot
expr.test.lua           #2 fully commented, waiting for transactions
fuzz-oss1.test.lua      #2 Waiting for autoincrement #2263
indexexpr1.test.lua     #2 after fix bug fully commented uses row id, sqlmaster... tests indexes on expressions! should be converted?
insert2.test.lua  #2 Waiting for access to count_changes #2455, lua_sql, transactions, temp tables
insert5.test.lua  #2 Waiting for pk autoincrement
icu.test.lua      #2 FC. waiting for transactions (regexp #2514)
like.test.lua     #2 Waiting for #2455, uses sqlite_like_count a lot( waiting for export of sqlite vars)
minmax.test.lua   #2 Waiting #2455, uses sqlite_search_count a lot
misc2.test.lua    #2 fully commented, uses rowid, rollback
misc6.test.lua    #2 waiting, uses sqlite3 inner funcs, tests sqlite3_value_text, 50lines, prep stat
nan.test.lua      #2 Waiting. uses prepared statements a looot
printf.test.lua   #2 uses sqlite3_mprintf_int (wich deleted with test1.c). Not relevant?
regexp.test.lua     #2 tests regexp extension. Colud be rewritten with lua_sql and lua regexp.
rollback.test.lua   #2 FC, transactions are not implemented #2140
rollback2.test.lua  #2 FC, transactions are not implemented #2140
rollbackfault.test.lua  #2 Fully commented, transactions are not implemented #2140
scanstatus.test.lua #2 Fully commented. Tests sqlite3_stmt_scanstatus, uses prep_statements
selectD.test.lua #2 waiting temptable FC. should be converted?
# sidedelete Not working. Don't know what to do.
# Null not allowed in pk(2.), and UPDATE OR REPLACE works differently in tarantool(3.) #2518
sidedelete.test.lua #2 FC. see above
skipscan1.test.lua  #2 Fully commented, uses sqlite_stat1, analyze
skipscan2.test.lua  #2 Fully commented, not sure why. May be because analyze is not implemented
skipscan3.test.lua  #2 Fully commented, not sure why. May be because analyze is not implemented
sort3.test.lua      #2(4) FC, sort huge arrays while mmap limit is 5mb, looks like a good test
sort4.test.lua      #2(4) Fully commented, multi-threaded sorting works, prep stat
sort5.test.lua      #2(4) Fully commented, not related to tarantool, tests legacy sqlite3_io_methods 
sortfault.test.lua  #2(4) FC. uses a lot of sqlite3 staff. looks like good test, tests faults during sort?

# 3 - Not relevant tests
8_3_names.test.lua    #3 Fully commented, uses exten wholenumber, transactions, cache_size
amatch1.test.lua      #3 fully commented (full text search), extens amatch
analyzer1.test.lua    #3 tests some "analyzer" binary (not sqlite)
async1.test.lua         #3 not connected to T. it is like test runner?
async2.test.lua         #3 Probably not necessqry, work with sqlite files
async3.test.lua         #3 Probably not necessqry, work with sqlite files
async4.test.lua         #3 Probably not necessqry, work with sqlite files
async5.test.lua         #3 Probably not necessqry, work with sqlite files
attach1.test.lua        #3 Fully commented. ATTACH/DETACH are not supposed to be supported in trntl.
attach2.test.lua        #3 Fully commented. ATTACH/DETACH are not supposed to be supported in trntl.
attach3.test.lua        #3 Fully commented. ATTACH/DETACH are not supposed to be supported in trntl.
attach4.test.lua        #3 Fully commented. ATTACH/DETACH are not supposed to be supported in trntl.
attachmalloc.test.lua   #3 Fully commented. ATTACH/DETACH are not supposed to be supported in trntl.
autovacuum.test.lua     #3 Functionality isn't related to trntl.
autovacuum_ioerr2.test.lua #3 Functionality isn't related to trntl.
avtrans.test.lua        #3 Functionality isn't related to trntl.
backcompat.test.lua     #3 do not related to tarantool!
backup1.test.lua        #3 Fully commented. Functionality doesn't related to trntl.
backup2.test.lua        #3 Functionality doesn't related to trntl.
backup4.test.lua        #3 Functionality doesn't related to trntl.
backup5.test.lua        #3 Functionality doesn't related to trntl.
backup_ioerr.test.lua   #3 Functionality doesn't related to trntl.
backup_malloc.test.lua  #3 Functionality doesn't related to trntl.
bigfile1.test.lua       #3 Fully commented. trntl's SQL doesn't deal with files at all.
bigfile2.test.lua       #3 Fully commented. trntl's SQL doesn't deal with files at all.
btree01.test.lua        #3 Functionality isn't related to trntl. 
btree02.test.lua        #2 Functionality isn't related to trntl. 
btreefault.test.lua     #3 not related to tarantool. Remove integrity_check from grammar
cache.test.lua          #3 not related to tarantool?
close.test.lua          #3 Not related to tarantool? test close connection (sqlite3_close)
descidx1.test.lua       #3 fully commented, not related to T
descidx2.test.lua       #3 fully commented, not related to T
descidx3.test.lua       #3 fully commented, not related to T
enc1.test.lua           #3 only utf8 enc in t.uses utf 16, convert data from one format to another
enc2.test.lua           #3 fully commented, retrive data (not store) in different encodings
enc3.test.lua           #3 uses utf 16
eval.test.lua           #2 Waiting. Uses special built-in function test_eval, can be done with lua_sql
exec.test.lua           #3 not needed in tarantool? tests sqlite3_exec function from legacy.c
func5.test.lua          #2 But remove utf16
index5.test.lua         #3 not related no tarantool? uses page_size
orderby7.test.lua #3 Not relevant. Test for FullTextSearcx (fts) which is not picked into Tarantool.
ptrchng.test.lua  #3 Waiting. uses pointer_change func (removed with test1.c). Checks if pointer changes with type convertion?
quota-glob.test.lua #3 sqlite3_quota_glob was removed, should be rewritten? (I think could be rewritten with just GLOB sql operator)
subtupe1.test.lua   #3 uses internal test_getsubtype func (removed with test_func.c)
tkt2643.test.lua #3 FC. Waiting. Testing analyze feature and statistics.
tkt3832.test.lua #1 tests case with inserting null to pk by trigger. Not related to T
tkt-2ea2425d34.test.lua #3 uses UTF 16 #2295, not related to T
tkt-3fe897352e.test.lua #3 inserting UTF 16 in utf8 bd
varint.test.lua   #3 not ralated to tarantool (testing btree, see test3.c, btree_varint_test)
tkt-26ff0c2d1e.test.lua #3 prepared statement
aggerror.test.lua     #3 waiting (uses sqlite3_create_aggregate, deleted with test1.c)
temptrigger.test.lua  #3 (#2168) Fully commented, test problems with temp triggers and multiple connections...
auth1.test.lua          #4 Fully commented. auth to be rewiewed later (post 1.8.3)
auth2.test.lua          #4 Fully commented. 
auth3.test.lua          #4 Fully commented. 
bind.test.lua           #4 Waiting. Uses prepared statements. Send testplan to Vlad
bindxfer.test.lua       #4 Waiting. Uses prepared statements
func4.test.lua          #4 not related to tarantool. tests load_static_extension totype
savepoint.test.lua  #4 Fully commented, transactions are not implemented #2140
savepoint1.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint2.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint3.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint4.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint5.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint6.test.lua #4 Fully commented, transactions are not implemented #2140
savepoint7.test.lua #4 Fully commented, transactions are not implemented #2140
speed1.test.lua     #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
speed2.test.lua     #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
speed3.test.lua     #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
speed4.test.lua     #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
speed4p.test.lua    #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
speed4pexplain.test.lua #4 Fully commented, uses a lot of sqlite internall staff. tests speed, showuld be rewritten
tableapi.test.lua   #4 uses sqlite3 specific funcs a lot sqlite3_exec_printf, sqlite3_get_table_printf (removed with test1.c)
